package net.seleucus.wsp.db;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

public class WSDatabaseAdaptor {


	private static final String[] TABLE_NAMES = {
		"PUBLIC.PASSPHRASES",
		"PUBLIC.USERS",
		"PUBLIC.ACTIONS_AVAILABLE",
		"PUBLIC.ACTIONS_RECEIVED"
	};
	
	private static final String[] TABLE_CREATES = {
		"(PPID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, PASSPHRASE VARCHAR(255) NOT NULL, CREATED TIMESTAMP(0) NOT NULL, MODIFIED TIMESTAMP(0) NOT NULL, PRIMARY KEY (PPID));",
		"(USID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, PPID INTEGER, FULLNAME VARCHAR(255), EMAIL VARCHAR(255), PHONE VARCHAR(25), CREATED TIMESTAMP NOT NULL, MODIFIED TIMESTAMP NOT NULL, PRIMARY KEY (USID), FOREIGN KEY (PPID) REFERENCES PUBLIC.PASSPHRASES(PPID));",
		"(AAID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, PPID INTEGER, NUMBER INTEGER NOT NULL, COMMAND VARCHAR(255) NOT NULL, LAST_EXECUTED TIMESTAMP, RUN_SUCCESS BOOLEAN, IP_ADDR VARCHAR(25), PRIMARY KEY (AAID), FOREIGN KEY (PPID) REFERENCES PUBLIC.PASSPHRASES(PPID) );",
		"(ARID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, IP_ADDR VARCHAR(25), RECEIVED TIMESTAMP NOT NULL, KNOCK VARCHAR(100) NOT NULL, AAID INTEGER, PRIMARY KEY (ARID), FOREIGN KEY (AAID) REFERENCES PUBLIC.ACTIONS_AVAILABLE(AAID) );"
	};
	
    private static final String HSQLDB_JDBC_DRIVER = "org.hsqldb.jdbcDriver";
    private static final String PROTOCOL = "jdbc:hsqldb:file:";

    private Connection connection;
    private Statement statement;
    
    private final String dbPath;
    
    public WSDatabaseAdaptor(final String dbPath) throws ClassNotFoundException, SQLException {
    	
    	this.dbPath = dbPath;
    	Class.forName(HSQLDB_JDBC_DRIVER);
    	
    	Properties props = new Properties();

    	props.put("create", "true");
		props.put("user", "sa");
    	props.put("shutdown", "true");
		props.put("password", "");
        props.put("jdbc.strict_md", "false");
		props.put("jdbc.get_column_name", "false");
		
		connection = DriverManager.getConnection(PROTOCOL + dbPath, props);
		connection.setAutoCommit(false);
	
		statement = connection.createStatement();
		
    }
    
    public synchronized void shutdown() throws SQLException {
    	
    	statement.execute("SHUTDOWN");
    	statement.close();
    	connection.commit();
    	connection.close();
    	
    }
    
    protected synchronized void deleteAllDatabaseFiles() throws SQLException {
    	
    	this.shutdown();
    	
    	String[] extensions = {".properties", ".script", ".log", ".data", ".backup"};
    	for(String extension : extensions) {
    		File dbFile = new File(dbPath + extension);
    		if(dbFile.exists()) {
    			dbFile.delete();
    		}
    	}
    	
    }
    
    protected synchronized void createTables() throws SQLException {
    	    	
    	for(int i = 0; i < 4; i++ ) {
    		statement.execute("CREATE TABLE " + TABLE_NAMES[i] + TABLE_CREATES[i]);
    	}

    }

    protected synchronized void dropAllTables() throws SQLException {

    	for(int count = 0; count < 4; count++) {
    		statement.execute("DROP TABLE " + TABLE_NAMES[count] + " IF EXISTS;");
    	}
    	
    }
    
    public synchronized boolean isDatabaseOK() throws SQLException {
    	
    	boolean dbOK = false;
    	
    	ResultSet tableLookUp = statement.executeQuery("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TABLE_TYPE = 'TABLE';");
    	Set<String> expectedTableSet = new HashSet<String>(Arrays.asList(TABLE_NAMES));
    	Set<String> receivedTableSet = new HashSet<String>();
    	
    	while(tableLookUp.next()) {
    		String tableName = tableLookUp.getString(1);
    		receivedTableSet.add(tableName);
    		
    	}
    	
    	if(receivedTableSet.containsAll(expectedTableSet) == true) {
    		dbOK = true;
    	}
    	
    	return dbOK;
    	
    }

}
